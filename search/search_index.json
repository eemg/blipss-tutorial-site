{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BLIPSS Tutorial","text":"<p>Welcome to the BLIPSS tutorial site! Here you will learn how to set up, run, and analyze Breakthrough Listen data using BLIPSS.</p>"},{"location":"#what-is-blipss","title":"What is BLIPSS?","text":"<p><code>blipss</code> is a CPU-based open-source software that targets the detection of narrowband periodic radar transmissions from potential technologically advanced alien life forms residing in the Universe. It uses a fast folding algorithm (FFA) to uncover channel-wide periodic signals in radio dynamic spectra.</p>"},{"location":"advanced_topics/","title":"Nothing to see here","text":""},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>Encourage users to contribute back\u2014file issues, request features, or submit pull requests.</p>"},{"location":"contributing/#citing-blipss","title":"Citing <code>blipss</code>","text":"<p>If using blipss contributes to a scientific publication, please cite the article: Suresh et al., \"A 4\u20138 GHz Galactic Center Search for Periodic Technosignatures\". 2023 AJ 165 255.</p>"},{"location":"data_preparation/","title":"Data Preparation","text":""},{"location":"data_preparation/#data-format","title":"Data Format","text":"<p>Explain the structure of the input data (e.g., filterbank files, metadata, frequency-time intensity arrays).</p>"},{"location":"data_preparation/#preprocessing-steps","title":"Preprocessing Steps","text":"<p>Describe RFI excision, bandpass calibration, dedispersion (if relevant), and other standard radio astronomy data cleaning steps.</p>"},{"location":"data_preparation/#running-initial-scripts","title":"Running Initial Scripts","text":"<p>Show how to run a basic preprocessing script that prepares data for the BLIPSS pipeline.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>First of all, you need to make sure you have the necessary computing equipment to proceed with the installation. It is recommended that you use either Linux or macOS for throughout this tutorial.</p> <p>One of the main tools we'll be using is <code>conda</code> and <code>pip</code>. If you haven't installed any of them, you can follow the instructions in the following pages:</p> <ul> <li> <p>Installing conda</p> </li> <li> <p>Installing pip</p> </li> </ul>"},{"location":"getting_started/#installing-blipss","title":"Installing blipss","text":""},{"location":"getting_started/#conda-environment","title":"Conda environment","text":"<p>It is recommended that the user creates a <code>conda</code> environment to carry out the entire installation to avoid conflicts with any packages that the user might have installed in their computer. So let's go ahead and do that</p> <pre><code>conda create -n &lt;name_of_your_env&gt; python=3.10\n</code></pre> <p>This creates a new <code>conda</code> environment that uses Python 3.10. Since <code>blipss</code> is written in Python 3.8.5, it is recommended that the user creates an environment with at least this version.</p>"},{"location":"getting_started/#cloning-the-repository","title":"Cloning the repository","text":"<p>The next step is to download a copy of the code to your local machine. For this, you'll have to navigate to the directory where you would like to save <code>blipss</code> on your computer (e.g.,  <code>/Users/eem5633/Documents/GitHub_repos/</code>). Once you decide where you'd like to save the code,  you'll enter this command on your terminal</p> <pre><code>git clone git@github.com:UCBerkeleySETI/blipss.git\n</code></pre> <p>This will create a new folder called \"blipss\" in your chosen directory. You'll have to access that folder by typing</p> <pre><code>cd blipss\n</code></pre> <p>Once you're inside the cloned repo, you'll have to install a few packages that will allow you to run <code>blipss</code></p> <p></p>"},{"location":"getting_started/#package-dependencies","title":"Package dependencies","text":"<p>Inside the new repo, you'll have to install the following packages: <code>astropy</code>, <code>blimpy</code>, <code>matplotlib</code>, <code>mpi4py</code>, <code>numpy</code>, <code>pandas</code>, <code>riptide-ffa</code>, <code>scipy</code>, and <code>tqdm</code>. This can be done by typing the following in your terminal</p> <pre><code>pip install \"astropy&gt;=4.0\" \\\n            \"blimpy&gt;=2.0.0\" \\\n            \"matplotlib&gt;=3.1.0\" \\\n            \"mpi4py&gt;=3.1.1\" \\\n            \"numpy&gt;=1.18.1\" \\\n            \"pandas&gt;=1.3.4\" \\\n            \"scipy&gt;=1.6.0\" \\\n            \"tqdm&gt;=4.32.1\" \\\n            \"riptide-ffa\"\n</code></pre> <p>Assuming you don't get any errors at this point, you're now ready start playing with the code!</p>"},{"location":"getting_started/#test-data","title":"Test Data","text":"<p>In order to get start working with blipss, you'll need to download the test data files in this shared Google Drive folder. These <code>.fil</code> files represent the on-beam and off-beam from a test pulsar scan.</p>"},{"location":"interpreting_results/","title":"Interpreting Results","text":""},{"location":"interpreting_results/#output-files","title":"Output Files","text":"<p>Explain the structure and content of BLIPSS outputs\u2014candidate lists, periodicity detection reports, diagnostic plots.</p>"},{"location":"interpreting_results/#candidate-verification","title":"Candidate Verification","text":"<p>Provide guidelines on how to classify candidates, cross-match signals between different observing sessions, and differentiate plausible technosignatures from terrestrial RFI.</p>"},{"location":"interpreting_results/#advanced-analysis","title":"Advanced Analysis","text":"<p>Advanced Analysis: Discuss optional post-processing steps (e.g., folding data, further statistical analysis, or applying machine learning filters).</p>"},{"location":"running_blipss/","title":"Running BLIPSS","text":""},{"location":"running_blipss/#command-line-usage","title":"Command-Line Usage","text":"<p>Explain the BLIPSS command-line interface, required arguments, and optional flags.</p> <p>The BLIPSS package currently contains six chief executable files. Each script in the <code>blipss/executables</code> folder has an associated <code>.cfg</code> file located in the <code>blipss/config</code> folder that allows you to modify the parameters for the corresponding <code>.py</code> script.  For example, the <code>blipss/config/blipss.cfg</code> file allows you to modify the parameters of the fast folding algorithm (FFA), such as the minimum and maximum trial folding period for the FFA search, and it also allows you to specify whether you'd like to deredden the time series before searching.</p>"},{"location":"running_blipss/#blipsspy","title":"<code>blipss.py</code>","text":"<p>The first step is to run the <code>executables/blipss.py</code> file. This script executes channel-wise FFA on input data files (filterbank or hdf5), identifies harmonics of  detected periods, and outputs a .csv file of candidates. An schematic of the <code>blipss.py</code> workflow is shown below:</p> <p></p> <p>Image caption</p> <p>To ensure a successful run, you'll have to open the <code>blipss/config/blipss.cfg</code> file and modify the path for the input data. For example, if you stored the test data in your <code>Downloads</code> folder, then the snippet for your input data should look like this:</p> <p></p> <p>Image caption</p> <p>You'll have to do the same for the <code>OUTPUT_DIR</code> variable in the same script. Once you've made these modifications, you'll need to save the file and now you can run the  <code>blipss.py</code> script as follows</p> <pre><code>mpiexec -n &lt;nproc&gt; python -m mpi4py executables/blipss.py -i config/blipss.cfg | tee &lt;Log file&gt;\n</code></pre> <p>where <code>&lt;nproc&gt;</code> specifies the number of processes that will be used in this run (e.g., you can set it to <code>2</code>) and <code>&lt;Log file&gt;</code> is the name of the text file where the output of the command above will be printed (e.g., you can call it <code>output1.txt</code>).</p> <p>If this command is successfully run, you should get an output that looks like this</p> <p></p> <p>Image caption</p> <p>This will produce two <code>.csv</code> files whose name ends with <code>...-beam0000_cands.csv</code> and  <code>...-beam0001_cands.csv</code>. Each of these files contain the information about the radio frquency used (in MHz), the number of bins, the best width, the period of the pulsar (s), the signal-to-noise ratio (S/N), and the harmonic flag for a specific channel. </p> <p>In addition to these <code>.csv</code> files, you should obtain two plots that look like this</p> <p></p> <p>Off-beam</p> <p></p> <p>On-beam</p>"},{"location":"running_blipss/#compare_candspy","title":"<code>compare_cands.py</code>","text":"<p>Now that we've processed the data for the two candidates, we have to compare them by running the <code>executables/compare_cands.py</code> script. This script compares the periodicity detections across a set of N <code>.csv</code> files generated by <code>blipss.py</code>. For every unique candidate period, an N-digit binary code is generated, wherein ones and zeros represent detections and non-detections, respectively.</p> <p>As with the <code>blipss.py</code> script, we need to modify the parameters first by editing the path to the blipss repo in your local machine. To do this we have to open the <code>config/compare_cands.cfg</code> file and modify the path to the <code>.csv</code> files generated by  <code>blipss</code></p> <p></p> <p>Image caption</p> <p>Now that we've edited the path in the <code>.cfg</code> file, we are now ready to run the <code>compare_cands.py</code> script. To run it, we should type the following command in the terminal</p> <pre><code>python executables/compare_cands.py -i config/compare_cands.cfg | tee &lt;Log file&gt;\n</code></pre> <p>where <code>&lt;Log file&gt;</code> is the name of the file where the output will be saved to.</p> <p>If the run is successful, you should see an output message that looks like this</p> <p></p> <p>Image caption</p> <p>This will produce a new <code>.csv</code> file whose name ends with <code>comparecands.csv</code>. </p>"},{"location":"running_blipss/#filter_candspy","title":"<code>filter_cands.py</code>","text":"<p>Next, we have to run the <code>filter_cands.py</code> script. This script is going to narrow down the search by selecting the channels that have a <code>S/N&gt;20</code> and have code <code>10</code>.</p> <p>To run this script, we have to type the following in the terminal</p> <pre><code>python filter_cands.py\n</code></pre> <p>and the output should be yet another <code>.csv</code> file whose name ends with <code>...filtered.csv</code>.</p>"},{"location":"running_blipss/#plotting-the-results","title":"Plotting the results","text":"<p>Now that we've managed to filter the candidates that have a <code>S/N&gt;20</code> and code <code>10</code>, it's time to plot the results for these candidates. The script we want to run is called <code>plot_cands.py</code> and it has an associated <code>.cfg</code> file that needs to be modified with the correct path to your local version of the blipss repo. Once you make these edits (following the same process as with previous scripts), you have to run the following command in the terminal</p> <pre><code>python executables/plot_cands.py -i config/plot_cands.cfg | tee &lt;Log file&gt;\n</code></pre> <p>where <code>&lt;Log file&gt;</code> will be the name of the file where the output of this run will be printed. If everything goes well, you should get the following output:</p> <p></p> <p>Image caption</p> <p></p> <p>Image caption</p> <p>In the example above, we had 21 candidates, so after running this last script, you will obtain one plot for each of the 21 candidates that looks like this</p> <p></p> <p>Image caption</p> <p>The candidate period is indicated by the red vertical dashed line.</p> <p>At this point, you'll have the pipeline working and validated!</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#common-errors","title":"Common errors","text":"<p>List known issues, error messages, and steps to resolve them.</p>"},{"location":"troubleshooting/#package-dependencies-riptide-ffa","title":"Package dependencies -- <code>riptide-ffa</code>","text":"<p>If you try to install the required packages by running the <code>setup.py</code> script in the <code>blipss</code> repo, you'll most likely encounter the following error when trying to install the <code>riptide-ffa</code> package:</p> <pre><code>No eggs found in /var/folders/wf/7jsqb_s54gd_0rxyxk7ctypnjry76x/T/easy_install-l9smnw03/riptide-ffa-0.2.5/egg-dist-tmp-9j7h1xjk (setup script problem?)\nerror: The 'riptide-ffa&gt;=0.2.4' distribution was not found and is required by blipss\n</code></pre> <p>This can be avoided by manually installing each package as described here.</p>"},{"location":"troubleshooting/#where-to-ask-for-help","title":"Where to Ask for Help","text":"<p>Direct users to the GitHub issue tracker.</p>"}]}