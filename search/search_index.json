{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BLIPSS Tutorial","text":"<p>Welcome to the BLIPSS tutorial site! Here you will learn how to set up, run, and analyze Breakthrough Listen data using BLIPSS.</p>"},{"location":"#what-is-blipss","title":"What is BLIPSS?","text":"<p><code>blipss</code> is a CPU-based open-source software that targets the detection of narrowband periodic radar transmissions from potential technologically advanced alien life forms residing in the Universe. It uses a fast folding algorithm (FFA) to search for channel-wide periodic signals in radio dynamic spectra.</p>"},{"location":"#what-is-the-purpose-of-this-website","title":"What is the purpose of this website?","text":"<p>The main objectives of this tutorial are: (1) to provide a clear, step-by-step workflow for analyzing periodic signals in radio spectra, (2) to guide users through the installation, configuration, and operation of BLIPSS, and (3) to support the interpretation of BLIPSS outputs and candidate evaluation. A more detailed description of this project can be found in this report.</p>"},{"location":"advanced_topics/","title":"Nothing to see here","text":""},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>Are you interested in improving this tutorial? We welcome any feedback to try to make this website  a clear resource to a broad audience. You can email <code>eem5633@psu.edu</code> with any suggestions you  might have. Also, feel free to submit pull requests on the website GitHub repository.</p>"},{"location":"contributing/#citing-blipss","title":"Citing <code>blipss</code>","text":"<p>If using blipss contributes to a scientific publication, please cite the article: Suresh et al., \"A 4\u20138 GHz Galactic Center Search for Periodic Technosignatures\". 2023 AJ 165 255.</p>"},{"location":"data_preparation/","title":"Data Preparation","text":""},{"location":"data_preparation/#data-format","title":"Data Format","text":"<p>Explain the structure of the input data (e.g., filterbank files, metadata, frequency-time intensity arrays).</p>"},{"location":"data_preparation/#preprocessing-steps","title":"Preprocessing Steps","text":"<p>Describe RFI excision, bandpass calibration, dedispersion (if relevant), and other standard radio astronomy data cleaning steps.</p>"},{"location":"data_preparation/#running-initial-scripts","title":"Running Initial Scripts","text":"<p>Show how to run a basic preprocessing script that prepares data for the BLIPSS pipeline.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>BLIPSS is distributed as a Python-based package, and its installation process typically involves obtaining the source code, setting up a suitable environment, and installing its dependencies. In this section, we will provide step-by-step instructions on how to implement each of these steps.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>It is recommended that you use a Unix-based operating system throughout this tutorial (e.g., Linux or macOS) and be somewhat comfortable with using basic commands in the terminal (e.g., changing directories, cloning a GitHub repository using <code>git</code>, and basic usage of <code>pip</code> to install any dependencies).</p> <p>One of the main tools we'll be using is <code>conda</code> and <code>pip</code>. If you haven't installed any of them, you can follow the instructions based on your operating system in the following pages:</p> <ul> <li> <p>Installing conda</p> </li> <li> <p>Installing pip</p> </li> </ul>"},{"location":"getting_started/#installing-blipss","title":"Installing blipss","text":""},{"location":"getting_started/#python-environment","title":"Python environment","text":"<p>Since <code>blipss</code> is written in Python 3.8.5, it is recommended that the user creates a Python 3.9+ environment to carry out the entire installation and avoid conflicts with any existing packages that the user might have installed in their computer. So let's go ahead and do that.</p> <p>You can create a virtual environment with <code>conda</code> by copying the following command and pasting it into your terminal</p> <p><pre><code>conda create -n &lt;name_of_your_env&gt; python=3.10\n</code></pre> This creates a new <code>conda</code> environment that uses Python 3.10. Once the new environment is created, you can activate it by doing</p> <pre><code>conda activate &lt;name_of_your_env&gt;\n</code></pre> <p>Alternatively, you can use <code>pip</code> to accomplish the same goal. You can create a virtual environment with the following command</p> <pre><code>python -m venv /path/to/new/virtual/environment\n</code></pre> <p>To activate this environment, you then type</p> <pre><code>source /path/to/new/virtual/environment/bin/activate\n</code></pre>"},{"location":"getting_started/#downloading-blipss","title":"Downloading <code>blipss</code>","text":"<p>The next step is downloading a copy of the <code>blipss</code> code in your local machine. You can do this by accessing the following shared google Drive folder</p> <p>Note</p> <p>Normally, the best way to do this would be cloning the <code>blipss</code> GitHub repository. However, the Google Drive version has some additional adjustments to <code>compare_cands.py</code> and a  filtering script that you wouldn't get if you just installed <code>blipss</code> from Github.</p> <p>This will create a new folder called <code>ATA-blipss</code> in your chosen directory. You will then have to access that folder by typing</p> <pre><code>cd ATA-blipss\n</code></pre> <p>Once you're inside this folder, you'll have to install a few more packages that will allow you to run <code>blipss</code></p> <p></p>"},{"location":"getting_started/#package-dependencies","title":"Package dependencies","text":"<p>Inside the new repo, you'll have to install the following packages: <code>astropy</code>, <code>blimpy</code>, <code>matplotlib</code>, <code>mpi4py</code>, <code>numpy</code>, <code>pandas</code>, <code>riptide-ffa</code>, <code>scipy</code>, and <code>tqdm</code>. This can be done by entering the following in your terminal</p> <p><pre><code>pip install \"astropy&gt;=4.0\" \\\n            \"blimpy&gt;=2.0.0\" \\\n            \"matplotlib&gt;=3.1.0\" \\\n            \"mpi4py&gt;=3.1.1\" \\\n            \"numpy&gt;=1.18.1\" \\\n            \"pandas&gt;=1.3.4\" \\\n            \"scipy&gt;=1.6.0\" \\\n            \"tqdm&gt;=4.32.1\" \\\n            \"riptide-ffa\"\n</code></pre> Assuming the installation is successful, and you don't get any errors, you're now ready to start playing with the code!</p>"},{"location":"interpreting_results/","title":"Interpreting Results","text":""},{"location":"interpreting_results/#output-files","title":"Output Files","text":"<p>Explain the structure and content of BLIPSS outputs\u2014candidate lists, periodicity detection reports, diagnostic plots.</p>"},{"location":"interpreting_results/#candidate-verification","title":"Candidate Verification","text":"<p>Provide guidelines on how to classify candidates, cross-match signals between different observing sessions, and differentiate plausible technosignatures from terrestrial RFI.</p>"},{"location":"interpreting_results/#advanced-analysis","title":"Advanced Analysis","text":"<p>Advanced Analysis: Discuss optional post-processing steps (e.g., folding data, further statistical analysis, or applying machine learning filters).</p>"},{"location":"running_blipss/","title":"Running BLIPSS","text":"<p>In order to validate the <code>blipss</code> pipeline, we will be working with two test data files derived from a pulsar observation of PSR J0332+5434 The dataset consists of two filterbank files <code>.fil</code> corresponding to the on-beam--pointing toward PSR J0332+5434 and exhibiting a strong, periodic signal--and the off-beam, which is pointed away from the pulsar, thereby providing a control sample where no strong periodic signal should be detected. The test dataset can be downloaded from this shared Google Drive folder.</p>"},{"location":"running_blipss/#blipss-structure","title":"Blipss structure","text":"<p>The BLIPSS package currently contains six chief executable files. Each script in the <code>executables</code> folder has an associated <code>.cfg</code> file located in the <code>config</code> folder that allows you to modify the parameters for the corresponding <code>.py</code> script.  For example, the <code>config/blipss.cfg</code> file allows you to modify the parameters of the fast folding algorithm (FFA), such as the minimum and maximum trial folding period for the FFA search, and it also allows you to specify whether you'd like to deredden the time series before searching.</p>"},{"location":"running_blipss/#step-1-execute-blipsspy","title":"Step 1: Execute <code>blipss.py</code>","text":"<p>Now that you've installed blipss on your computer and already downloaded the test dataset, the first thing you need to do is run the <code>executables/blipss.py</code> file. This script executes a channel-wise FFA on input data files (in our case, the <code>.fil</code> files), identifies harmonics of  detected periods, and outputs a .csv file with a list of candidates. An schematic of the <code>blipss.py</code> workflow is shown below:</p> <p></p> <p>A schematic representation of the blipss workflow. A sequence of N input filterbank files is processed channel-wise to search for periodic signals. Operations on different input files are parallelizable across multiple cores of a machine. Stage 1 outputs a list of periodicity candidates detected per channel for every input file. This diagram was taken from (Suresh et al. 2023).</p> <p>To ensure a successful run, you will first have to open the <code>config/blipss.cfg</code> file and modify the path for the input data. For example, if you stored the test data in your <code>Downloads</code> folder, then the snippet for your input data should look like this:</p> <p></p> <p>Block of code for the input data in the <code>blipss.cfg</code> file.</p> <p>You must do the same for the <code>OUTPUT_DIR</code> variable in the same <code>.cfg</code> file and enter the path to the location where you want to store the output of the <code>blipss.py</code> script. Once you've made these modifications, you will save the file and then run the  <code>blipss.py</code> script as follows</p> <pre><code>mpiexec -n &lt;nproc&gt; python -m mpi4py executables/blipss.py -i config/blipss.cfg | tee &lt;Log file&gt;\n</code></pre> <p>where <code>&lt;nproc&gt;</code> specifies the number of processes that will be used in this run (e.g., you can set it to <code>2</code>) and <code>&lt;Log file&gt;</code> is the name of the text file where the output of the command above will be printed (e.g., you can call it <code>output1.txt</code>).</p> <p>If this command is executed successfully, you should get an output that looks like this</p> <p></p> <p>This will produce two <code>.csv</code> files whose name ends with <code>beam0000_cands.csv</code> and  <code>beam0001_cands.csv</code>. Each of these files contain the information about the radio frequency used (in MHz), the number of bins, the best width, the period of the pulsar (s), the signal-to-noise ratio (S/N), and the harmonic flag for a specific channel. In addition to these <code>.csv</code> files, you should obtain two plots that look like this</p> <p></p> <p>Off-beam</p> <p></p> <p>On-beam</p>"},{"location":"running_blipss/#step-2-execute-compare_candspy","title":"Step 2: Execute <code>compare_cands.py</code>","text":"<p>Now that we've processed the data for the two candidates, we have to compare them by running the <code>executables/compare_cands.py</code> script. This script compares the periodicity detections across a set of N <code>.csv</code> files generated by <code>blipss.py</code>. For every unique candidate period, an N-digit binary code is generated, wherein ones and zeros represent detections and non-detections, respectively.</p> <p>As with the <code>blipss.py</code> script, we first need to modify the <code>.cfg</code> file by editing the path to the blipss repo in your local machine. To do this we have to open the <code>config/compare_cands.cfg</code> file and enter the path to the directory where the <code>.csv</code> files generated by  <code>blipss.py</code> were stored. This is shown in the following code snippet</p> <p></p> <p>Block of code for the input data in the <code>compare_cands.cfg</code> file.</p> <p>Once you've edited the path in the <code>.cfg</code> file, you are now ready to run the <code>compare_cands.py</code> script. To run execute this, you need to type the following command in the terminal</p> <p><pre><code>python executables/compare_cands.py -i config/compare_cands.cfg | tee &lt;Log file&gt;\n</code></pre> where <code>&lt;Log file&gt;</code> is the name of the file where the output will be saved to.</p> <p>If the run is successful, you should see an output message that looks like this</p> <p></p> <p>This will produce a new <code>.csv</code> file whose name ends with <code>comparecands.csv</code>. </p>"},{"location":"running_blipss/#step-3-execute-filter_candspy","title":"Step 3: Execute <code>filter_cands.py</code>","text":"<p>Next, we have to run the <code>filter_cands.py</code> script. This script is going to narrow down the search of periodic signals by selecting the channels that have a <code>S/N&gt;20</code> and have code <code>10</code>. To run this script, we have to type the following command in the terminal</p> <pre><code>python filter_cands.py\n</code></pre> <p>This will output yet another <code>.csv</code> file whose name ends with <code>filtered.csv</code>.</p>"},{"location":"running_blipss/#step-4-plot-the-results","title":"Step 4: Plot the results","text":"<p>Now that we've managed to filter the candidates that have a <code>S/N&gt;20</code> and code <code>10</code>, it's time to plot the results for these candidates. The script that we have to run is called <code>plot_cands.py</code> and it has an associated <code>.cfg</code> file that needs to be modified with the correct path to your local version of the blipss repo. Once you make these edits (following the same process as with previous scripts), you have to run the following command in the terminal</p> <p><pre><code>python executables/plot_cands.py -i config/plot_cands.cfg | tee &lt;Log file&gt;\n</code></pre> If everything goes well, you should see the following output</p> <p></p> <p></p> <p></p> <p>In the example above, we had 21 candidates, so after running the <code>plot_cands.py</code> script, you will obtain one plot for each of the 21 candidates that looks like this</p> <p></p> <p>Plot of the <code>P = 1.42938 s</code> candidate signal. The left column shows periodograms derived from each data file, the ON-beam and OFF-beam. The candidate period is indicated by the red dashed vertical lines. The right column shows the average pulse profiles (top subplot) and phase-time diagrams (bottom subplot).</p> <p>A \u201ctrue\u201d signal would appear as a strong peak in the periodogram at the determined period, as well as a vertical bar in the phase-time diagram for the ON-beam (top subplots) but not the OFF-beam (bottom subplots). Figure 1 shows one plot of the signal with <code>P = 1.42938 s</code>. As we can see in this case, the red dashed coincides with the the most prominent peak in the periodogram, which indicates that pulsed radio signals were detected. </p> <p>At this point, you'll have the pipeline working and validated!</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#common-errors","title":"Common errors","text":""},{"location":"troubleshooting/#package-dependencies-riptide-ffa","title":"Package dependencies -- <code>riptide-ffa</code>","text":"<p>If you try to install the required packages by running the <code>setup.py</code> script provided in the <code>blipss</code> repo, you'll most likely encounter the following error when trying to install the <code>riptide-ffa</code> package:</p> <pre><code>No eggs found in /var/folders/wf/7jsqb_s54gd_0rxyxk7ctypnjry76x/T/easy_install-l9smnw03/riptide-ffa-0.2.5/egg-dist-tmp-9j7h1xjk (setup script problem?)\nerror: The 'riptide-ffa&gt;=0.2.4' distribution was not found and is required by blipss\n</code></pre> <p>This can be avoided by manually installing each package as described here.</p>"},{"location":"troubleshooting/#where-to-ask-for-help","title":"Where to Ask for Help","text":"<p>Don't see your error in the list above? Feel free to reach out to <code>eem5633@psu.edu</code> and  describe the error you're encountering. We'll be happy to assist you in resolving it.</p>"}]}